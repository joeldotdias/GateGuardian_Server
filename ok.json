{ {
    _on_attach = <function 1>,
    attached_buffers = { true },
    cancel_request = <function 2>,
    commands = {},
    config = {
      autostart = true,
      capabilities = {
        textDocument = {
          callHierarchy = {
            dynamicRegistration = false
          },
          codeAction = {
            codeActionLiteralSupport = {
              codeActionKind = {
                valueSet = { "", "quickfix", "refactor", "refactor.extract", "refactor.inline", "refactor.rewrite", "source", "source.organizeImports" }
              }
            },
            dataSupport = true,
            dynamicRegistration = false,
            isPreferredSupport = true,
            resolveSupport = {
              properties = { "edit" }
            }
          },
          completion = {
            completionItem = {
              commitCharactersSupport = false,
              deprecatedSupport = false,
              documentationFormat = { "markdown", "plaintext" },
              preselectSupport = false,
              snippetSupport = false
            },
            completionItemKind = {
              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 }
            },
            contextSupport = false,
            dynamicRegistration = false
          },
          declaration = {
            linkSupport = true
          },
          definition = {
            linkSupport = true
          },
          documentHighlight = {
            dynamicRegistration = false
          },
          documentSymbol = {
            dynamicRegistration = false,
            hierarchicalDocumentSymbolSupport = true,
            symbolKind = {
              valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
            }
          },
          hover = {
            contentFormat = { "markdown", "plaintext" },
            dynamicRegistration = false
          },
          implementation = {
            linkSupport = true
          },
          publishDiagnostics = {
            relatedInformation = true,
            tagSupport = {
              valueSet = { 1, 2 }
            }
          },
          references = {
            dynamicRegistration = false
          },
          rename = {
            dynamicRegistration = false,
            prepareSupport = true
          },
          semanticTokens = {
            augmentsSyntaxTokens = true,
            dynamicRegistration = false,
            formats = { "relative" },
            multilineTokenSupport = false,
            overlappingTokenSupport = true,
            requests = {
              full = {
                delta = true
              },
              range = false
            },
            serverCancelSupport = false,
            tokenModifiers = { "declaration", "definition", "readonly", "static", "deprecated", "abstract", "async", "modification", "documentation", "defaultLibrary" },
            tokenTypes = { "namespace", "type", "class", "enum", "interface", "struct", "typeParameter", "parameter", "variable", "property", "enumMember", "event", "function", "method", "macro", "keyword", "modifier", "comment", "string", "number", "regexp", "operator", "decorator" }
          },
          signatureHelp = {
            dynamicRegistration = false,
            signatureInformation = {
              activeParameterSupport = true,
              documentationFormat = { "markdown", "plaintext" },
              parameterInformation = {
                labelOffsetSupport = true
              }
            }
          },
          synchronization = {
            didSave = true,
            dynamicRegistration = false,
            willSave = true,
            willSaveWaitUntil = true
          },
          typeDefinition = {
            linkSupport = true
          }
        },
        window = {
            showDocument = {
              support = true
            },
            showMessage = {
              messageActionItem = {
                additionalPropertiesSupport = false
              }
            },
            workDoneProgress = true
          },
          workspace = {
            applyEdit = true,
            configuration = true,
            didChangeWatchedFiles = {
              dynamicRegistration = false,
              relativePatternSupport = true
            },
            semanticTokens = {
              refreshSupport = true
            },
            symbol = {
              dynamicRegistration = false,
              hierarchicalWorkspaceSymbolSupport = true,
              symbolKind = {
                valueSet = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26 }
              }
            },
            workspaceEdit = {
              resourceOperations = { "rename", "create", "delete" }
            },
            workspaceFolders = true
          }
        },
        cmd = { "/home/jdlemon/.local/share/nvim/mason/bin/typescript-language-server", "--stdio" },
      cmd_cwd = "/home/jdlemon/sw/mern-cohort-01/http-server-1",
      filetypes = { "javascript", "javascriptreact", "javascript.jsx", "typescript", "typescriptreact", "typescript.tsx" },
      flags = {},
      get_language_id = <function 3>,
      handlers = <1>{},
      init_options = {
        hostInfo = "neovim"
      },
      log_level = 2,
      message_level = 2,
      name = "tsserver",
      on_attach = <function 4>,
      on_exit = <function 5>,
      on_init = <function 6>,
      root_dir = "/home/jdlemon/sw/mern-cohort-01/http-server-1",
      settings = {
        implicitProjectConfiguration = {
          checkJs = true
        }
      },
      single_file_support = true,
      workspace_folders = <2>{ {
          name = "/home/jdlemon/sw/mern-cohort-01/http-server-1",
          uri = "file:///home/jdlemon/sw/mern-cohort-01/http-server-1"
        } },
      <metatable> = {
        __tostring = <function 7>
      }
    },
    handlers = <table 1>,
    id = 2,
    initialized = true,
    is_stopped = <function 8>,
    messages = {
      messages = {},
      name = "tsserver",
      progress = {},
      status = {}
    },
    name = "tsserver",
    notify = <function 9>,
    offset_encoding = "utf-16",
    request = <function 10>,
    request_sync = <function 11>,
    requests = {},
    rpc = {
      is_closing = <function 12>,
      notify = <function 13>,
      request = <function 14>,
      terminate = <function 15>
    },
    server_capabilities = {
      callHierarchyProvider = true,
      codeActionProvider = {
        codeActionKinds = { "source.fixAll.ts", "source.removeUnused.ts", "source.addMissingImports.ts", "source.organizeImports.ts", "source.removeUnusedImports.ts", "source.sortImports.ts", "quickfix", "refactor" }
      },
      codeLensProvider = {
        resolveProvider = true
      },
      completionProvider = {
        resolveProvider = true,
        triggerCharacters = { ".", '"', "'", "/", "@", "<" }
      },
      definitionProvider = true,                                                                                                                      documentFormattingProvider = true,                                                                                                              documentHighlightProvider = true,                                                                                                               documentRangeFormattingProvider = true,                                                                                                         documentSymbolProvider = true,                                                                                                                  executeCommandProvider = {                                                                                                                        commands = { "_typescript.applyWorkspaceEdit", "_typescript.applyCodeAction", "_typescript.applyRefactoring", "_typescript.configurePlugin", "_typescript.organizeImports", "_typescript.applyRenameFile", "_typescript.goToSourceDefinition" }
      },
      foldingRangeProvider = true,
      hoverProvider = true,
      implementationProvider = true,
      inlayHintProvider = true,
      linkedEditingRangeProvider = false,
      referencesProvider = true,
      renameProvider = {
        prepareProvider = true
      },
      selectionRangeProvider = true,
      semanticTokensProvider = {
        full = true,
        legend = {
          tokenModifiers = { "declaration", "static", "async", "readonly", "defaultLibrary", "local" },
          tokenTypes = { "class", "enum", "interface", "namespace", "typeParameter", "type", "parameter", "variable", "enumMember", "property",
"function", "member" }
        },
        range = true
      },
      signatureHelpProvider = {
        retriggerCharacters = { ")" },
        triggerCharacters = { "(", ",", "<" }
      },
      textDocumentSync = {
        change = 2,
        openClose = true,
        save = {
          includeText = false
        },
        willSave = false,
        willSaveWaitUntil = false
      },
      typeDefinitionProvider = true,
      workspace = {
        fileOperations = {
          willRename = {
            filters = { {
                pattern = {
                  glob = "**/*.{ts,js,jsx,tsx,mjs,mts,cjs,cts}",
                  matches = "file"
                },
                scheme = "file"
              }, {
                pattern = {
                  glob = "**",
                  matches = "folder"
                },
                scheme = "file"
              } }
          }
        }
      },
      workspaceSymbolProvider = true
    },
    stop = <function 16>,
    supports_method = <function 17>,
    workspace_did_change_configuration = <function 18>,
    workspace_folders = <table 2>
  } }